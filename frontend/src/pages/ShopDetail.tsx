import { FC, useState, useContext, useEffect } from "react";
import { useParams, useNavigate, Link } from "react-router-dom";
import { CartContext } from "../context/CartContext";

interface Review {
  id: number;
  name: string;
  rating: number;
  comment: string;
  createdAt: string;
}

const ShopDetail: FC = () => {
  const { id } = useParams();
  const { addToCart, clearCart } = useContext(CartContext);
  const navigate = useNavigate();

  // üîπ Danh s√°ch s·∫£n ph·∫©m (demo)
  const allProducts = [
    {
      id: 1,
      title: "√Åo thun th·ªÉ thao Nike Dri-FIT",
      price: 650000,
      image: "/assets/images/product/Dri-Fit.avif",
      colors: ["ƒêen", "Xanh navy", "Tr·∫Øng"],
      sizes: ["S", "M", "L", "XL"],
      description: `### üëï Gi·ªõi thi·ªáu s·∫£n ph·∫©m  
√Åo thun th·ªÉ thao **Nike Dri-FIT** ƒë∆∞·ª£c s·∫£n xu·∫•t v·ªõi c√¥ng ngh·ªá th·∫•m h√∫t m·ªì h√¥i ti√™n ti·∫øn, gi√∫p b·∫°n lu√¥n kh√¥ tho√°ng v√† t·ª± tin trong m·ªçi bu·ªïi t·∫≠p luy·ªán.  
V·ªõi thi·∫øt k·∫ø nƒÉng ƒë·ªông, ch·∫•t li·ªáu nh·∫π v√† tho√°ng kh√≠, s·∫£n ph·∫©m ph√π h·ª£p cho c·∫£ **nam v√† n·ªØ**, t·ª´ ng∆∞·ªùi t·∫≠p gym, yoga ƒë·∫øn ch·∫°y b·ªô ngo√†i tr·ªùi.  

### üèÜ ∆Øu ƒëi·ªÉm n·ªïi b·∫≠t  
- Ch·∫•t li·ªáu **Dri-FIT** ƒë·ªôc quy·ªÅn c·ªßa Nike gi√∫p tho√°t m·ªì h√¥i nhanh.  
- V·∫£i co gi√£n 4 chi·ªÅu, √¥m v·ª´a v·∫∑n c∆° th·ªÉ, kh√¥ng g√¢y b√≠.  
- Logo Nike in n·ªïi b·ªÅn m√†u, ch·ªëng bong tr√≥c.  
- ƒê∆∞·ªùng may tinh t·∫ø, gi·∫£m ma s√°t khi v·∫≠n ƒë·ªông.  

### ‚öôÔ∏è Th√¥ng s·ªë k·ªπ thu·∫≠t  
| Thu·ªôc t√≠nh | Th√¥ng tin |
|-------------|-----------|
| Ch·∫•t li·ªáu | 100% Polyester Dri-FIT |
| M√†u s·∫Øc | ƒêen / Tr·∫Øng / Xanh navy |
| Size | S, M, L, XL |
| Xu·∫•t x·ª© | Vi·ªát Nam |
| Gi·∫∑t | Gi·∫∑t nh·∫π, kh√¥ng s·∫•y n√≥ng, kh√¥ng ng√¢m thu·ªëc t·∫©y |

### üí° H∆∞·ªõng d·∫´n b·∫£o qu·∫£n  
- Gi·∫∑t b·∫±ng tay ho·∫∑c m√°y gi·∫∑t ch·∫ø ƒë·ªô nh·∫π.  
- Kh√¥ng ph∆°i tr·ª±c ti·∫øp d∆∞·ªõi √°nh n·∫Øng m·∫°nh.  
- ·ª¶i ·ªü nhi·ªát ƒë·ªô th·∫•p n·∫øu c·∫ßn thi·∫øt.  

> S·∫£n ph·∫©m ph√π h·ª£p cho ng∆∞·ªùi ch∆°i th·ªÉ thao, d√¢n vƒÉn ph√≤ng y√™u th√≠ch s·ª± tho·∫£i m√°i ho·∫∑c l√†m qu√† t·∫∑ng cho b·∫°n b√® y√™u th·ªÉ thao.`,
    },

    {
      id: 2,
      title: "Qu·∫ßn jogger Adidas nam",
      price: 850000,
      image: "/assets/images/product/Z.N.E._Pants_Black.avif",
      colors: ["X√°m", "ƒêen"],
      sizes: ["M", "L", "XL"],
      description: `### üëñ Gi·ªõi thi·ªáu s·∫£n ph·∫©m  
**Qu·∫ßn jogger Adidas nam** mang phong c√°ch th·ªÉ thao hi·ªán ƒë·∫°i, d·ªÖ ph·ªëi ƒë·ªì v√† ti·ªán d·ª•ng trong m·ªçi ho√†n c·∫£nh ‚Äî t·ª´ ƒëi l√†m, ƒëi h·ªçc cho ƒë·∫øn luy·ªán t·∫≠p.  
Thi·∫øt k·∫ø √¥m v·ª´a v·∫∑n gi√∫p t√¥n d√°ng, mang l·∫°i c·∫£m gi√°c nƒÉng ƒë·ªông v√† tho·∫£i m√°i.

### üèÜ ∆Øu ƒëi·ªÉm n·ªïi b·∫≠t  
- D√°ng jogger bo g·∫•u th·ªùi trang, linh ho·∫°t khi v·∫≠n ƒë·ªông.  
- V·∫£i cotton pha spandex m·ªÅm m·ªãn, kh√¥ng nhƒÉn, kh√¥ng x√π.  
- C·∫°p chun co gi√£n, d√¢y r√∫t ƒëi·ªÅu ch·ªânh linh ho·∫°t.  
- In logo Adidas tinh t·∫ø ·ªü ·ªëng qu·∫ßn, t·∫°o ƒëi·ªÉm nh·∫•n th∆∞∆°ng hi·ªáu.  

### ‚öôÔ∏è Th√¥ng s·ªë k·ªπ thu·∫≠t  
| Thu·ªôc t√≠nh | Th√¥ng tin |
|-------------|-----------|
| Ch·∫•t li·ªáu | Cotton 70% + Spandex 30% |
| M√†u s·∫Øc | ƒêen / X√°m tro |
| Size | M, L, XL |
| Xu·∫•t x·ª© | Vi·ªát Nam |
| Form | Regular Fit (√¥m nh·∫π, tho·∫£i m√°i) |

### üí° H∆∞·ªõng d·∫´n b·∫£o qu·∫£n  
- Gi·∫∑t ri√™ng v·ªõi s·∫£n ph·∫©m s√°ng m√†u.  
- Kh√¥ng d√πng ch·∫•t t·∫©y m·∫°nh.  
- ·ª¶i m·∫∑t trong ·ªü nhi·ªát ƒë·ªô th·∫•p.  

> ƒê√¢y l√† l·ª±a ch·ªçn h√†ng ƒë·∫ßu cho nh·ªØng ai y√™u th√≠ch phong c√°ch **streetwear nƒÉng ƒë·ªông**, ho·∫∑c c·∫ßn m·ªôt chi·∫øc qu·∫ßn v·ª´a ƒë·∫πp v·ª´a d·ªÖ v·∫≠n ƒë·ªông.`,
    },

    {
      id: 3,
      title: "Gi√†y ch·∫°y b·ªô Asics Gel",
      price: 1900000,
      image: "/assets/images/product/Samba_OG_Shoes_White.avif",
      colors: ["Tr·∫Øng", "Xanh d∆∞∆°ng"],
      sizes: ["39", "40", "41", "42"],
      description: `### üëü Gi·ªõi thi·ªáu s·∫£n ph·∫©m  
**Gi√†y ch·∫°y b·ªô Asics Gel** l√† d√≤ng s·∫£n ph·∫©m n·ªïi ti·∫øng to√†n c·∫ßu c·ªßa th∆∞∆°ng hi·ªáu Asics Nh·∫≠t B·∫£n, n·ªïi b·∫≠t v·ªõi c√¥ng ngh·ªá **GEL Cushioning System** ‚Äì ƒë·ªám kh√≠ gi√∫p gi·∫£m ch·∫•n th∆∞∆°ng v√† b·∫£o v·ªá kh·ªõp g·ªëi khi ch·∫°y.

### üèÜ ∆Øu ƒëi·ªÉm n·ªïi b·∫≠t  
- H·ªá th·ªëng ƒë·ªám GEL ƒë·∫∑c tr∆∞ng h·∫•p thu l·ª±c t·ªëi ƒëa khi ti·∫øp ƒë·∫•t.  
- ƒê·∫ø ngo√†i AHAR+ cao su si√™u b·ªÅn, ch·ªëng tr∆°n tr∆∞·ª£t hi·ªáu qu·∫£.  
- Th√¢n gi√†y mesh 3D tho√°ng kh√≠, nh·∫π v√† √¥m ch√¢n.  
- Thi·∫øt k·∫ø th·ªùi trang, c√≥ th·ªÉ d√πng cho c·∫£ ch·∫°y b·ªô l·∫´n ƒëi l√†m h√†ng ng√†y.  

### ‚öôÔ∏è Th√¥ng s·ªë k·ªπ thu·∫≠t  
| Thu·ªôc t√≠nh | Th√¥ng tin |
|-------------|-----------|
| Ch·∫•t li·ªáu | Mesh t·ªïng h·ª£p + Cao su AHAR+ |
| Tr·ªçng l∆∞·ª£ng | ~250g m·ªói chi·∫øc |
| M√†u s·∫Øc | Tr·∫Øng / Xanh d∆∞∆°ng |
| Size | 39 ‚Äì 42 |
| Xu·∫•t x·ª© | Nh·∫≠t B·∫£n (gia c√¥ng t·∫°i Vi·ªát Nam) |

### üí° H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng & b·∫£o qu·∫£n  
- N√™n mang gi√†y v·ªõi t·∫•t cotton ƒë·ªÉ tƒÉng ƒë·ªô tho√°ng kh√≠.  
- Tr√°nh gi·∫∑t m√°y, ch·ªâ v·ªá sinh b·∫±ng khƒÉn ·∫©m v√† b√†n ch·∫£i m·ªÅm.  
- ƒê·ªÉ n∆°i kh√¥ tho√°ng sau khi s·ª≠ d·ª•ng.  

> D√†nh cho ng∆∞·ªùi y√™u th·ªÉ thao, d√¢n c√¥ng s·ªü th√≠ch ƒëi b·ªô nh·∫π ho·∫∑c ng∆∞·ªùi c·∫ßn ƒë√¥i gi√†y ƒëa nƒÉng ‚Äî v·ª´a **tho·∫£i m√°i**, v·ª´a **th·ªùi trang**.`,
    },
  ];

  const product = allProducts.find((p) => p.id === Number(id));
  const [quantity, setQuantity] = useState(1);
  const [selectedSize, setSelectedSize] = useState<string>("");
  const [selectedColor, setSelectedColor] = useState<string>("");

  // üîπ Qu·∫£n l√Ω tab hi·ªÉn th·ªã (m√¥ t·∫£ / b√¨nh lu·∫≠n)
  const [activeTab, setActiveTab] = useState<"desc" | "reviews">("desc");

  // üîπ B√¨nh lu·∫≠n & ƒë√°nh gi√°
  const [reviews, setReviews] = useState<Review[]>([]);
  const [newReview, setNewReview] = useState({
    name: "",
    rating: 5,
    comment: "",
  });

  useEffect(() => {
    const stored = localStorage.getItem(`reviews_${id}`);
    if (stored) setReviews(JSON.parse(stored));
  }, [id]);

  const averageRating =
    reviews.length > 0
      ? (
          reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length
        ).toFixed(1)
      : "0";

  // ‚úÖ Th√™m b√¨nh lu·∫≠n
  const handleAddReview = () => {
    if (!newReview.name || !newReview.comment) {
      alert("Vui l√≤ng nh·∫≠p t√™n v√† n·ªôi dung b√¨nh lu·∫≠n!");
      return;
    }
    const newItem: Review = {
      id: Date.now(),
      name: newReview.name,
      rating: newReview.rating,
      comment: newReview.comment,
      createdAt: new Date().toLocaleString(),
    };
    const updated = [newItem, ...reviews];
    setReviews(updated);
    localStorage.setItem(`reviews_${id}`, JSON.stringify(updated));
    setNewReview({ name: "", rating: 5, comment: "" });
  };

  if (!product)
    return (
      <div className="text-center py-20 text-gray-600 text-lg">
        Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.{" "}
        <Link to="/shop" className="text-yellow-600 underline">
          Quay l·∫°i c·ª≠a h√†ng
        </Link>
      </div>
    );

  // ‚úÖ Th√™m v√†o gi·ªè
  const handleAddToCart = () => {
    if (
      (product.sizes.length > 0 && !selectedSize) ||
      (product.colors.length > 0 && !selectedColor)
    ) {
      alert("Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß size v√† m√†u (n·∫øu c√≥)!");
      return;
    }
    addToCart({
      id: product.id,
      title:
        product.title +
        (selectedSize || selectedColor
          ? ` (${selectedSize || ""}${selectedSize && selectedColor ? " - " : ""}${
              selectedColor || ""
            })`
          : ""),
      price: product.price,
      image: product.image,
      quantity,
    });
    alert("‚úÖ ƒê√£ th√™m v√†o gi·ªè h√†ng!");
  };

  // ‚úÖ Mua ngay
  const handleBuyNow = () => {
    clearCart();
    addToCart({
      id: product.id,
      title: product.title,
      price: product.price,
      image: product.image,
      quantity,
    });
    navigate("/checkout");
  };

  const related = allProducts.filter((p) => p.id !== product.id).slice(0, 3);

  return (
    <div className="py-10">
      {/* üîπ Breadcrumb */}
      <div className="text-sm text-gray-500 container mx-auto mb-6 px-6">
        <Link to="/" className="hover:text-yellow-600">
          Home
        </Link>{" "}
        /{" "}
        <Link to="/shop" className="hover:text-yellow-600">
          Shop
        </Link>{" "}
        / <span className="text-gray-800">{product.title}</span>
      </div>

      {/* üîπ Th√¥ng tin s·∫£n ph·∫©m */}
      <div className="container mx-auto grid md:grid-cols-2 gap-10 px-6">
        <div>
          <img
            src={product.image}
            alt={product.title}
            className="w-full h-[400px] object-contain bg-gray-100 rounded-lg mb-4"
          />
        </div>

        <div>
          <h1 className="text-3xl font-bold mb-2 text-gray-800">
            {product.title}
          </h1>

          {/* ‚≠ê ƒê√°nh gi√° trung b√¨nh */}
          <div className="flex items-center mb-3 text-yellow-500">
            {[1, 2, 3, 4, 5].map((n) => (
              <i
                key={n}
                className={`fa ${n <= Number(averageRating) ? "fa-star" : "fa-star-o"}`}
              ></i>
            ))}
            <span className="ml-2 text-sm text-gray-600">
              {averageRating}/5 ({reviews.length} ƒë√°nh gi√°)
            </span>
          </div>

          <p className="text-2xl text-yellow-600 font-semibold mb-4">
            {product.price.toLocaleString("vi-VN")}ƒë
          </p>

          {/* Ch·ªçn size / m√†u */}
          {product.sizes.length > 0 && (
            <div className="mb-4">
              <h3 className="font-semibold mb-2">Ch·ªçn Size:</h3>
              <div className="flex gap-3">
                {product.sizes.map((s) => (
                  <button
                    key={s}
                    onClick={() => setSelectedSize(s)}
                    className={`px-4 py-2 border rounded ${
                      selectedSize === s
                        ? "bg-yellow-500 text-white"
                        : "hover:border-yellow-400"
                    }`}
                  >
                    {s}
                  </button>
                ))}
              </div>
            </div>
          )}
          {product.colors.length > 0 && (
            <div className="mb-4">
              <h3 className="font-semibold mb-2">Ch·ªçn M√†u:</h3>
              <div className="flex gap-3">
                {product.colors.map((c) => (
                  <button
                    key={c}
                    onClick={() => setSelectedColor(c)}
                    className={`px-4 py-2 border rounded ${
                      selectedColor === c
                        ? "bg-black text-white"
                        : "hover:border-yellow-400"
                    }`}
                  >
                    {c}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* S·ªë l∆∞·ª£ng */}
          <div className="flex items-center gap-3 mt-4">
            <div className="flex items-center border rounded">
              <button
                className="px-3 py-1"
                onClick={() => setQuantity((q) => Math.max(1, q - 1))}
              >
                ‚àí
              </button>
              <input
                readOnly
                value={quantity}
                className="w-12 text-center border-x"
              />
              <button
                className="px-3 py-1"
                onClick={() => setQuantity((q) => q + 1)}
              >
                +
              </button>
            </div>
            <button
              onClick={handleAddToCart}
              className="bg-yellow-500 text-white px-6 py-2 rounded hover:bg-yellow-600 transition"
            >
              Th√™m v√†o gi·ªè
            </button>
            <button
              onClick={handleBuyNow}
              className="bg-black text-white px-6 py-2 rounded hover:bg-gray-900 transition"
            >
              Mua ngay
            </button>
          </div>
        </div>
      </div>

      {/* üîπ Tabs: M√¥ t·∫£ & ƒê√°nh gi√° */}
      <div className="container mx-auto mt-16 px-6">
        <div className="flex border-b mb-6">
          <button
            onClick={() => setActiveTab("desc")}
            className={`py-2 px-6 font-semibold ${
              activeTab === "desc"
                ? "border-b-2 border-yellow-500 text-yellow-600"
                : ""
            }`}
          >
            M√¥ t·∫£ s·∫£n ph·∫©m
          </button>
          <button
            onClick={() => setActiveTab("reviews")}
            className={`py-2 px-6 font-semibold ${
              activeTab === "reviews"
                ? "border-b-2 border-yellow-500 text-yellow-600"
                : ""
            }`}
          >
            ƒê√°nh gi√° & B√¨nh lu·∫≠n
          </button>
        </div>

        {activeTab === "desc" && (
          <div className="bg-white p-6 rounded-lg shadow whitespace-pre-line text-gray-700">
            {product.description}
          </div>
        )}

        {activeTab === "reviews" && (
          <div className="bg-white p-6 rounded-lg shadow">
            {/* Form b√¨nh lu·∫≠n */}
            <h3 className="text-lg font-semibold mb-3 text-gray-800">
              Vi·∫øt ƒë√°nh gi√° c·ªßa b·∫°n
            </h3>
            <div className="grid md:grid-cols-2 gap-4 mb-4">
              <input
                type="text"
                placeholder="T√™n c·ªßa b·∫°n"
                value={newReview.name}
                onChange={(e) =>
                  setNewReview({ ...newReview, name: e.target.value })
                }
                className="border p-2 rounded"
              />
              <select
                value={newReview.rating}
                onChange={(e) =>
                  setNewReview({ ...newReview, rating: Number(e.target.value) })
                }
                className="border p-2 rounded"
              >
                {[5, 4, 3, 2, 1].map((r) => (
                  <option key={r} value={r}>
                    {r} ‚òÖ
                  </option>
                ))}
              </select>
            </div>
            <textarea
              placeholder="Nh·∫≠n x√©t c·ªßa b·∫°n..."
              value={newReview.comment}
              onChange={(e) =>
                setNewReview({ ...newReview, comment: e.target.value })
              }
              className="border p-2 rounded w-full mb-3"
              rows={3}
            ></textarea>
            <button
              onClick={handleAddReview}
              className="bg-yellow-500 hover:bg-yellow-600 text-black font-semibold px-4 py-2 rounded"
            >
              G·ª≠i ƒë√°nh gi√°
            </button>

            {/* Danh s√°ch b√¨nh lu·∫≠n */}
            <div className="mt-6">
              <h3 className="text-lg font-semibold mb-4 text-gray-800">
                ƒê√°nh gi√° t·ª´ ng∆∞·ªùi mua ({reviews.length})
              </h3>
              {reviews.length === 0 ? (
                <p className="text-gray-500">Ch∆∞a c√≥ ƒë√°nh gi√° n√†o.</p>
              ) : (
                reviews.map((r) => (
                  <div
                    key={r.id}
                    className="border-b py-3 flex flex-col md:flex-row md:items-center md:justify-between"
                  >
                    <div>
                      <p className="font-semibold text-gray-800">{r.name}</p>
                      <div className="text-yellow-500 text-sm">
                        {"‚òÖ".repeat(r.rating)} {"‚òÜ".repeat(5 - r.rating)}
                      </div>
                      <p className="text-gray-700 mt-1">{r.comment}</p>
                    </div>
                    <span className="text-sm text-gray-400">{r.createdAt}</span>
                  </div>
                ))
              )}
            </div>
          </div>
        )}
      </div>

      {/* üîπ S·∫£n ph·∫©m li√™n quan */}
      <div className="container mx-auto px-6 mt-20">
        <h3 className="text-2xl font-bold mb-8 text-gray-800">
          S·∫£n ph·∫©m li√™n quan
        </h3>
        <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-6">
          {related.map((item) => (
            <div
              key={item.id}
              className="bg-white rounded-lg shadow hover:shadow-lg overflow-hidden transition-transform hover:-translate-y-1"
            >
              <Link to={`/shop/${item.id}`}>
                <img
                  src={item.image}
                  alt={item.title}
                  className="w-full h-56 object-contain bg-gray-100"
                />
              </Link>
              <div className="p-4 text-center">
                <Link
                  to={`/shop/${item.id}`}
                  className="block font-semibold text-gray-800 hover:text-yellow-600"
                >
                  {item.title}
                </Link>
                <p className="text-yellow-600 mt-1 font-medium">
                  {item.price.toLocaleString("vi-VN")}ƒë
                </p>
              </div>
            </div>
          ))}
        </div>

        <div className="text-center mt-10">
          <Link
            to="/shop"
            className="text-yellow-600 font-semibold hover:underline"
          >
            ‚Üê Quay l·∫°i c·ª≠a h√†ng
          </Link>
        </div>
      </div>
    </div>
  );
};

export default ShopDetail;
